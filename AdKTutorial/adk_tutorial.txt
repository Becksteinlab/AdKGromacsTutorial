.. -*- encoding: utf-8 -*-

.. |kJ/mol/nm**2| replace:: kJ mol\ :sup:`-1` nm\ :sup:`-2`
.. |Calpha| replace:: C\ :sub:`α`

.. αβγδΔ

=================================
 MD simulation with Gromacs: AdK
=================================

Objective: Perform a MD simulation of the apo-enzyme AdK in its open
conformation in a realistic environment and analyze basic properties.

1. Setup

   - obtain structure 4AKE from PDB, select chain A

   - use default protonation states

   - generate topology

   - solvate in water in simulation cell (rhombic dodecahedron)

   - add NaCl ions to neutralise and final physiological concentration
     of 100 mM
   
2. Energy minimisation (EM)

3. Position restraint equilibration of solvent (MD); *NPT* (use weak
   coupling (Berendsen) schemes)

4. Equilibrium MD simulation (unrestrained, *NPT*, use Nose-Hoover and
   Parrinello-Rahman temperature and pressure coupling)

5. Analysis

   - RMSD
   - RMSF
   - radius of gyration
   - opening (NMP-LID distance)
   - secondary structure


All input files are provided in the tar file
`AdKTutorial.tar.bz2`_. Download and uncompress::

  curl -O http://becksteinlab.physics.asu.edu/pages/courses/2013/SimBioNano/13/AdKTutorial.tar.bz2
  tar -jxvf AdKTutorial.tar.bz2 
  cd AdKTutorial

A starting structure can be found in the :file:`AdKTutorial/coord`
directory and MDP files are in :file:`AdKTutorial/templates`.


Directory organization
======================

Suggested directory layout::

   coord/
   top/
   solvation/
   emin/
   posres/
   MD/
   analysis/

.. rubric:: Short description of the directories

:file:`coord`
  original PDB files
:file:`top`
  topology files (``.top``, ``.itp``)
:file:`solvation`
  add solvent and ions
:file:`emin`
  energy minimization
:file:`posres`
  short MD simulation with position restraints on the heavy protein
  atoms, to allow the solvent to equilibrate around the protein
  without disturbing the protein structure
:file:`MD`
  MD simulation (typically, you will transfer the :file:`md.tpr` file to a
  supercomputer, run the simulation there, then copy the the output
  back to this trajctory)
:file:`analysis`
  analyze the simulations in (sub)directories under analysis, e.g. ::

     analysis/RMSD
     analysis/RMSF
     ...

  The subdirectories depend on the specific analysis tasks that you
  want to carry out. The above directory layout is only a suggestion
  but in practice some sort of ordered directory hierarchy has proven
  very useful.


The command snippets below assume the above directory layout. We will
not explicitly list all the necessary ``cd`` commands to change
directories. The workflow is such that each step is carried out
*inside the appropriate directory* and relative paths are used to
access files from previous steps. It should be clear from the context
in which directory the commands are to be executed. If you get a
``File input/output error`` from :program:`grompp` (or any of the
other commands) then check that you are able to see the file by just
doing a ``ls ../path/to/file`` from where you are in the file system.
If you can't see the file then check (1) that you are in the correct
directory, (2) that you have created the file in a previous step.



Setup of the solvated protein system
====================================

- Setup all directories::

     mkdir coord top solvation emin posres MD analysis

- Get 4AKE_ and only keep chain A:
  
  - download from the protein databank::

     pdb_downloader.sh -d coord 4ake

  - remove all comment lines (but keep TITLE, HEADER)
  - remove all crystal waters (HOH) [#crystalwaters]_
  - remove all chain B ATOM records. 
  - save as :file:`coord/4ake_a.pdb`.

  .. Note:: The starting structure :file:`coord/4ake_a.pdb` has been
            provided as part of the tutorial package.

- Generate a topology for the CHARMM27 force field together with the
  TIP3P water model::
     
    cd top
    pdb2gmx -f ../coord/4ake_a.pdb -o protein.pdb -p 4ake.top -i protein_posre.itp -water tip3p -ff charmm27 -nochargegrp 

  note: total charge -4.000e (in the next step we will add ions to
  neutralize the system; we need a net-neutral system)


- solvation: create a simulation box with editconf_ and add solvent with `genbox`_::
   
    cd solvation
    editconf -f ../top/protein.pdb -o boxed.pdb -d 0.5 -bt dodecahedron -c 
    genbox -cp boxed.pdb -cs spc216 -p ../top/4ake.top -o solvated.pdb   
  
  .. Note:: 

     In order to reduce the system size and make the simulations run
     faster we are choosing a very tight box (minimum protein-edge
     distance 0.5 nm, ``-d 0.5``); for simulations you want to publish
     this number should be 1.2...1.5 nm so that the electrostatic
     interactions between copies of the protein across periodic
     boundaries are sufficiently screened.

  genbox_ updates the number of solvent molecules ("SOL") in the
  topology file (check the ``[ system ]`` section in
  ``top/system.top``) [#topupdate]_.

- add ions with the genion_ program.
  
  First we need a basic TPR file (an empty file is sufficient, just
  ignore the warnings that :program:`grompp` spits out by setting
  ``-maxwarn 10``), then run :program:`genion` (which has convenient
  options to neutralize the system and set the concentration (check
  the help!); :program:`genion` also updates the topology's ``[ system
  ]`` section if the top file is provided [#topupdate]_; it reduces the
  "SOL" molecules by the number of removed molecules and adds the
  ions, e.g. "NA" and "CL"). ::
    
    touch ions.mdp
    grompp -f ions.mdp -o ions.tpr -p ../top/4ake.top -c solvated.pdb
    echo "SOL" | genion -s ions.tpr -random -pname NA -pq 1 -nname CL  -nq -1 -conc 0.1 -neutral -p ../top/4ake.top -o ionized.pdb

  The final output is ``solvation/ionized.pdb``. Check visually in VMD
  (but note that the dodecahedral box is not represented properly.)

.. _energy-minimization:

Energy minimization
===================

In order to remove "clashes" (i.e. close overlaps of the LJ cores) we
perform an *energy minization*: Instead of a MD simulation we use an
algorithm to change the coordinates in such a way as to reduce the
total potential energy.

We use the simple *steepest descent* minimizer (``integrator = steep``
in ``em.mdp``, which runs in parallel)::

  grompp -f em.mdp -o em.tpr -c ../solvation/ionized.pdb -p ../top/4ake.top

The energy minimization is performed with :program:`mdrun` but by using
the appropriate ``integrator`` option in the `Run control options in
the MDP file`_ it has been instructed to do "EM"::

  mdrun -v -s em.tpr -deffnm em -c em.pdb

Ideally, the maximum force *Fmax* (gradient of the potential) should
be < 1e+03 |kJ/mol/nm**2| (but typically anything below 1e+05
|kJ/mol/nm**2| works). See the screen output or the ``em.log`` file for
this information.

If you want to minimze further, you can use the ``em.pdb`` structure
as an input for a second run with either the *conjugate gradients*
(``integrator = cg``) or the Newton-like
*Broyden-Fletcher-Goldfarb-Shanno* (``integrator = l-bfgs``)
minimizer. For details see `Run control options in the MDP file`_.


.. _position-restraints:

Position restraints MD
======================

We first perform a short MD simulation with harmonic position
restraints on the heavy protein atoms. This allows the solvent to
equilibrate around the protein without disturbing the protein
structure. In addition, we use "weak coupling" temperature and
pressure coupling algorithms to obtain the desired temperatue and
pressure.

This step requires the ``top/protein_posres.itp`` file with the
default value for the harmonic force constants of 1000
|kJ/mol/nm**2|. The position restraints are switched on by setting the
``-DPOSRES`` flag in the ``posres.mdp`` file (see `mdp options`_).

Create the run input (TPR) file, using the :ref:`energy minimized
system <energy-minimization>` as the starting structure::
  
  grompp -f posres.mdp -o posres.tpr -p ../top/4ake.top -c ../emin/em.pdb 

The mdp file contains cut-off settings that approximate the native
CHARMM values (in the CHARMM program). 

Weak (Berendsen) coupling is used for both temperature and pressure to
quickly equilibrate. The protein and the solvent (water and ions) are
coupled as separate groups. Gromacs provides a range of groups
automatically (run ``make_ndx -f TPR`` to see them) and we use the
groups ``Protein`` and ``non-Protein`` (these particularly groups work
roughly since Gromacs 4.5.3). If the standard groups do not work then
you will have to create the groups yourself using ``make_ndx -f TPR -o
md.ndx`` (which would save them in a file ``md.ndx``) and supply it to
``grompp -n md.ndx``.

Run the simulation locally::

  mdrun -v -stepout 10 -s posres.tpr -deffnm posres -c posres.pdb

(If this is too slow on your workstation, submit to saguaro using 8
cores.)

.. note:: Here the runtime of 10 ps is too short for real production
          use; typically 1 - 5 ns are used.

In order to visually check your system, create trajectory with all
molecules in the primary unitcell (``-ur compact``; see also below the
more extensive notes on :ref:`trajectory-visualization`)::

   echo "System" | trjconv -ur compact -s posres.tpr -f posres.xtc -pbc mol -o posres_ur.xtc

Check visually::
  
   vmd emin/em.pdb posres_ur.xtc 

(This means "load the ``emin/em.pdb`` file into VMD and the load the
``posres/posres_ur.xtc`` trajectory into your molecule 1".)

.. _equilibrium-MD:

Equilibrium molecular dynamics
==============================

Prepare the TPR input file based on the last frame of the
:ref:`position-restraints`::

   grompp -f md.mdp -o md.tpr -p ../top/4ake.top -c ../posres/posres.pdb 

The ``md.mdp`` file uses different algorithms from the
:ref:`position-restraints` for the temperature and pressure coupling,
which are known to reproduce the exact *NPT* ensemble distribution.

You can run this simulation on :ref:`saguaro <running-on-saguaro>`
and/or on :ref:`your local workstation <running-locally>`.


.. _running-on-saguaro:

Running on saguaro
------------------

Log into **saguaro** (where *USER* is your saguaro login)::

 ssh -l USER saguaro.fulton.asu.edu

and create a AdK directory in your scratch space (if possible you
should always run from a scratch directory under ``/scratch/$USER``
[#scratch]_)::

 cd /scratch/$USER
 mkdir AdK

From your **workstation**, transfer the MD files to your saguaro scratch
directory (replace *USER* with your login name)::

 scp -r MD USER@saguaro.fulton.asu.edu:/scratch/USER

On **saguaro**, ::

 cd /scratch/$USER/AdK/MD
  
Run simulations on saguaro on 32 cores with the ``-npme 4`` option
[#npme]_ for 100 ps. Create a submission script :file:`saguaro.pbs`
similar to the one below::

   #!/bin/bash
   #PBS -N AdK
   #PBS -l nodes=32
   #PBS -l walltime=00:20:00
   #PBS -A phy598s113
   #PBS -j oe
   #PBS -o md.$PBS_JOBID.out

   # host: saguaro
   # queuing system: PBS

   # max run time in hours, 1 min = 0.0167
   WALL_HOURS=0.333

   DEFFNM=md
   TPR=$DEFFNM.tpr

   LIBDIR=/home/obeckste/Library

   cd $PBS_O_WORKDIR

   . $LIBDIR/Gromacs/versions/4.5.5/bin/GMXRC
   module load openmpi/1.4.5-intel-12.1

   MDRUN=$LIBDIR/Gromacs/versions/4.5.5/bin/mdrun_mpi

   # -noappend because apparently no file locking possible on Lustre (/scratch)
   mpiexec $MDRUN -npme 4 -s $TPR -deffnm $DEFFNM -maxh $WALL_HOURS -cpi -noappend

Submit the job::

 qsub saguaro.pbs

This should take 10-20 mins. When done (check the log file that you
have completed 100 ps), rename the output files::

  mv md.part0001.gro md.gro
  mv md.part0001.edr md.edr
  mv md.part0001.xtc md.xtc
  mv md.part0001.log md.log

(Don't bother renaming the files if you need to
perform a :ref:`continuation run<continuation-run>` as described
below.)

Copy the files back to the workstation (on the **workstation**)::

 scp -r USER@saguaro.fulton.asu.edu:/scratch/USER/AdK/MD/* MD/

and :ref:`analyse locally <analysis>` on the workstation. 

.. _continuation-run:
.. rubric:: Continuation runs

If your job ran into a time limit and it was killed by the queuing
system before it completed all steps then you can simply launch the
simulation again from the same directory in order to *continue the
run*. The checkpoint file :file:`md.cpt` must be present and you will
later need *all output files* :file:`md.part{NUMBER}.{EXT}` such as
:file:`md.part0001.xtc`, :file:`md.part0002.xtc`,
:file:`md.part0001.edr`, ... Simply run the queuing script again::

  qsub saguaro.pbs

The continuation works with the :code:`-cpi` flag of
:program:`mdrun`. Unfortunately, on saguaro we also have to use the
:code:`-noappend` flag, which writes separate files for each
continuation run (:code:`-append` would append trajectories on the
fly, i.e. you would only have files :file:`md.xtc`, :file:`md.edr`,
:file:`md.log`... in your run directory). When a run with
:code:`-noappend` is complete you have to use trjcat_ and eneconv_ to
produce the final trajectory::

  trjcat -f md.part*.xtc -o md.xtc
  eneconv -f md.part*.edr -o md.edr
  cat md.part*.log > md.log
  mv md.part*.gro md.gro

Check that the new trajectory is roughly the size of the combined
parts :code:`ls -la` and then delete the parts.

.. warning:: 

   Make *sure* that you have correctly assembled your complete
   trajectory. It is costly to rerun your simulation!

   You can also use gmxcheck_ to verify that your assembled
   trajectories are in order.

If you are positive that you don't need the parts anymore, delete
them::

  rm md.part*.*

Finally, copy back your files to your workstation for further
:ref:`analysis`.


.. _running-locally:

Running on your local workstation
---------------------------------

If your workstation has a decent number of cores or if you simply
don't mind waiting a bit longer you can also run the simulation as
usual::

 mdrun -v -stepout 10 -s md.tpr -deffnm md -cpi

This will automatically utilize all available cores. The :code:`-cpi`
flag indicates that you want Gromacs to continue from a previous
run. You can kill the job with :kbd:`CONTROL-C`, look at the output,
then continue with exactly the same command line ::

 mdrun -v -stepout 10 -s md.tpr -deffnm md -cpi

(Try it out!). The :code:`-cpi` flag can be used on the first run
without harm. For a continuation to occur, Gromacs needs to find the
checkpoint file :file:`md.cpt` and all output files (:file:`md.xtc`,
:file:`md.edr`, :file:`md.log`) in the current directory.


.. _analysis:

Analysis
========

Analysis should normally be performed locally on your workstation.

.. rubric:: Analysis jobs

If you have to perform analysis on saguaro you will have to submit an
analysis job. You must write your own submission script with the
analysis commands included. It is important that you **set the number
of nodes to 1** (:code:`#PBS -l nodes=1`) because no analysis tool can
make use of multiple nodes and you would simply waste CPU-hours---we
get billed for the requested nodes, not for what you actually use!

An analysis submission script could be similar to the following::

   #!/bin/bash
   #PBS -N analysis
   #PBS -l nodes=1
   #PBS -l walltime=00:10:00
   #PBS -A phy598s113
   #PBS -j oe
   #PBS -o analysis.$PBS_JOBID.out

   # host: saguaro
   # queuing system: PBS

   LIBDIR=/home/obeckste/Library

   cd $PBS_O_WORKDIR

   . $LIBDIR/Gromacs/versions/4.5.5/bin/GMXRC
   module load openmpi/1.4.5-intel-12.1

   # example RMSD calculation; replace with your command   
   printf "Calpha\nCalpha\n" | g_rms -s md.tpr -f md.xtc -n ca.ndx -o rmsd.xvg -fit rot+trans

Note that *all required input files* must be present in the directory
from which you are submitting.


.. _trajectory-visualization:

Trajectory visualization
------------------------

If you just look at the output trajectory :file:`md.xtc` you will see that
the protein can be split across the periodic boundaries and that the
simulation cell just looks like distorted prism. You should *recenter*
the trajectory so that the protein is at the center, *remap* the water
molecules (ans ions) to be located in a more convenient unitcell
representation, and it is often desirable to *RMS-fit* the protein on
a reference structure (such as the first frame in the trajectory) to
remove overall translation and rotation.

In Gromacs, the trjconv_ tool can do all these "trajectory conversion
tasks". The protocol is to (1) center and remap and (2) to RMS-fit
(due to technical limitations in :program:`trjconv` you cannot do both
at the same time). :program:`trjconv` asks the user a number of
questions that depend on the chosen options. In the command lines
below, this user input is directly fed to the standard input of
:program:`trjconv` with the :kbd:`printf TEXT | trjconv` "pipe"
construct. In order to better understand the command, run it
interactively without the pipe construct and manually provide the
required information.

Center (:code:`-center`) on the *Protein* and remap all the molecules
(:code:`-pbc mol`) of the whole *System*::

  printf "Protein\nSystem\n" | trjconv -s md.tpr -f md.xtc -center -ur compact -pbc mol -o md_center.xtc

RMS-fit (:code:`-fit rot+trans`) to the protein *backbone* atoms in
the initial frame (supplied in the TPR file) and write out the whole
*System*::

 printf "Backbone\nSystem\n" | trjconv -s md.tpr -f md_center.xtc -fit rot+trans -o md_fit.xtc

Visualize::

 vmd ../posres/posres.pdb md_fit.xtc



Observables
-----------

A number of interesting quantities and observables can be calculated
with Gromacs tools [#observable]_. A selection is shown below but you are encouraged
to read the `Gromacs manual`_ and the `Gromacs documentation`_ to find
out what else is available.

.. Note::

   The online manual is the documentation for Gromacs 4.6.1 at the
   moment whereas we are using version 4.5.5. Some of the descriptions
   may vary slightly. If in doubt, check the help function (:kbd:`-h` or
   :kbd:`man COMMAND`) or the `Gromacs 4.5.6 PDF`_ from the `manual
   section`_.

.. rubric:: Selection of Gromacs analysis tools

`g_rms`_
    calculate the root mean square deviation from a reference structure

`g_rmsf`_
    calculate the per-residue root mean square fluctuations

`g_gyrate`_
    calculate the radius of gyration

`g_dist`_, `g_mindist`_
    calculate the distance between atoms or groups of atoms (make a
    index file with `make_ndx`_ to define the groups of
    interest). :program:`g_mindist` is especially useful to find water
    molecules close to a region of interest.

    For AdK, look at the distance between the |Calpha| of K145 and I52.

`do_dssp`_
    Use the DSSP_ algorithm [Kabsch1983]_ to analyze the secondary structure
    (helices, sheets, ...). 


.. _RMSD:

RMSD
~~~~

The RMSD is the root mean squared Euclidean distance in *3N*
configuration space as function of the time step,

.. math::

   \rho^{\mathrm{RMSD}}(t) = \sqrt{\frac{1}{N} \sum_{i=1}^{N}\left(\mathbf{r}_{i}(t) - \mathbf{r}_{i}^{\mathrm{ref}}\right)^2}

between the current coordinates :math:`\mathbf{r}_{i}(t)` at time *t*
and the reference coordinates :math:`\mathbf{r}_{i}^{\mathrm{ref}}`.

We compute the |Calpha| **RMSD** with `g_rms`_ with respect to the
reference starting structure (the one used for creating the :file:`md.tpr`
file). Work in a separate analysis directory::

  mkdir analysis/RMSD && cd analysis/RMSD

First we **create an index file** for the |Calpha| atoms
[#default_ndx_groups]_. Use `make_ndx`_ to create a file
:file:`ca.ndx` that contains the |Calpha| atoms as an *index
group*. Start :program:`make_ndx` and use :file:`md.tpr` as input; the
output index file will be :file:`ca.ndx`::

  make_ndx -f ../../MD/md.tpr -o CA.ndx

Use `make_ndx`_ interactively by typing the following commands [#scripted_make_ndx]_::

  keep 1
  a CA
  name 1 Calpha
  q

(This sequence of commands only retains the "Protein" default
selection, then selects all atoms named "CA", renames the newly
created group to "Calpha", and saves and exits.)

You can look at :file:`CA.ndx` and see all the index numbers listed
under the heading ``[ Calpha ]``.

Run :program:`g_rms`, using our newly defined group as the selection
to fit and to compute the RMSD::

  printf "Calpha\nCalpha\n" | g_rms -s ../../MD/md.tpr -f ../../MD/md.xtc -n CA.ndx -o rmsd.xvg -fit rot+trans

Note that the units are nm.

Plot the ``rmsd.xvg`` file as usual (you might want to use :kbd:`g_rms
-xvg none` if you are processing with NumPy/matplotlib)::

 import matplotlib.pyplot as plt
 import numpy
 t,rmsd = numpy.loadtxt("rmsd.xvg", unpack=True)
 fig = plt.figure(figsize=(5,2.5)) 
 ax = fig.add_subplot(111)
 fig.subplots_adjust(bottom=0.2)
 ax.set_xlabel("time $t$ (ps)")
 ax.set_ylabel(r"C$_\alpha$ RMSD (nm)")
 ax.fill_between(t,rmsd, color="blue", linestyle="-", alpha=0.1) 
 ax.plot(t,rmsd, color="blue", linestyle="-") 
 fig.savefig("rmsd_ca.png", dpi=300)
 fig.savefig("rmsd_ca.svg")
 fig.savefig("rmsd_ca.pdf")

.. figure:: /figures/rmsd_ca.svg
   :scale: 80%
   :alt: RMSD timeseries
   
   Root mean square distance (RMSD) of the |Calpha| atoms of AdK from
   the initial simulation frame.
   

RMSF
~~~~

The residue root mean square fluctuation **RMSF** is a measure of the
flexibility of a residue. It is typically calculated for the |Calpha|
atom of each residue and is then simply the square root of the
variance of the fluctuation around the average position:

.. math::

   \rho^{\mathrm{RMSF}}_i = \sqrt{\left\langle 
        \left(\mathbf{r}_i - \langle \mathbf{r}_i \rangle \right)^2 
        \right\rangle}

Use the :file:`CA.ndx` file from the :ref:`RMSD` calculation with
`g_rmsf`_::

  mkdir analysis/RMSF && cd analysis/RMSF
  printf "Calpha\n" | g_rmsf -s ../../MD/md.tpr -f ../../MD/md.xtc -n ../RMSD/CA.ndx -o rmsf.xvg -fit

A plot of :math:`\rho^{\mathrm{RMSF}}_{i}` versus residue number *i*
shows the regions of high flexibility as peaks in the plot. Note that
a 100-ps simulation might be too short to obtain a meaningful RMSF
profile. 

.. figure:: /figures/rmsf_ca.svg
   :scale: 80%
   :alt: Per-residue RMSF
   
   Root mean square fluctuation (RMSF) of the |Calpha| atoms of AdK.


.. import matplotlib.pyplot as plt
.. import numpy
.. resid,rmsf = numpy.loadtxt("rmsf.xvg", unpack=True)
.. fig = plt.figure(figsize=(5,2.5))
.. ax = fig.add_subplot(111)
.. fig.subplots_adjust(bottom=0.2)
.. ax.set_xlabel("residue number")
.. ax.set_ylabel(r"C$_\alpha$ RMSF (nm)")
.. ax.fill_between(resid, rmsf, color="red", linestyle="-", alpha=0.1)
.. ax.plot(resid, rmsf, color="red", linestyle="-")
.. ax.set_xlim(resid.min(), resid.max())
.. fig.savefig("rmsf_ca.png", dpi=300)
.. fig.savefig("rmsf_ca.svg")
.. fig.savefig("rmsf_ca.pdf")



.. rubric:: Comparison with crystallographic B-factors

You can compare the RMSF to the isotropic atomic crystallographic
B-factors, which are related by [Willis1975]_

.. math::

   B_{i} = \frac{8\pi^2}{3} (\rho^{\mathrm{RMSF}}_{i})^2

(In this case you would want to calculate the RMSF for all heavy
(i.e. non-hydrogen) atoms. You don't need to build and use a separate
index file file: simply choose the default group "Protein-H" ("protein
without hydrogens")).

.. Note:: Gromacs RMSF are in units of nm and B-factors are
          typically measured in Å\ :sup:`2`.

It is straightforward to write Python code that calculates the
B-factor from the RMSF in :file:`rmsf.xvg` and it is also easy to
extract the B-factor ("temperatureFactor") from columns 61-66 in the
`ATOM record of a PDB file`_.



Distances
~~~~~~~~~

Distances can be a very useful observable to track conformational
changes. They can often be directly related to real experimental
observables such as NOEs from NMR experiments or distances from
cross-linking or FRET experiments.

Here we calculate a simple distance between two |Calpha| atoms as an
approximation to the distance between two chromophores attached to the
correspoding residues isoleucine 52 (*I52*) and lysine 145 (*K145*) used
in a FRET experiment [Henzler-Wildman2007]_.

First we need to create an index file containing the two groups::

 mkdir -p analysis/dist/I52_K145 && cd analysis/dist/I52_K145
 make_ndx -f ../../../MD/md.tpr -o I52_K145.ndx

Use interactive commands like the following [#ndx_selections]_::

 keep 0
 del 0
 r 52 & a CA
 name 0 I52
 r 145 & a CA
 name 1 K145
 q

to generate the index file :file:`I52_K145.ndx`.
 
The run `g_dist`_ and compute the distance between the two atoms::

  printf "I52\nK145\n" | g_dist -s ../../../MD/md.tpr -f ../../../MD/md.xtc -n I52_K145.ndx -o dist.xvg

The :file:`dist.xvg` file contains the distance in nm for each time
step in ps.

.. figure:: /figures/d_I52_K145_ca.svg
   :scale: 80%
   :alt: Timeseries of the distance between |Calpha| atoms of I52 and K145.
   
   Timeseries of the distance between the |Calpha| atoms of I52 (NMP
   domain) and K145 (LID domain).

.. ::
..  import matplotlib.pyplot as plt
..  import numpy
..  t,d,x,y,z = numpy.loadtxt("dist.xvg", unpack=True)
..  fig = plt.figure(figsize=(5,2.5)) 
..  ax = fig.add_subplot(111)
..  fig.subplots_adjust(bottom=0.2)
..  ax.set_xlabel("time $t$ (ps)")
..  ax.set_ylabel(r"C$_\alpha$ distance (nm)")
..  ax.fill_between(t, d, color="orange", linestyle="-", alpha=0.1) 
..  ax.plot(t, d, color="orange", linestyle="-", label="I52-K145")
..  ax.legend(loc="best") 
..  fig.savefig("d_I52_K145_ca.png", dpi=300)
..  fig.savefig("d_I52_K145_ca.svg")
..  fig.savefig("d_I52_K145_ca.pdf")


(You can also use the centered and fitted trajectory
:file:`md_fit.xtc` as an input instead of :file:`md.xtc` to make sure
that the distance calculation does not contain any jumps due to
periodic boundary effects, or use `g_mindist`_.)

.. SeeAlso:: [Beckstein2009]_ for a discussion of FRET distances in AdK.



Radius of gyration
~~~~~~~~~~~~~~~~~~

The radius of gyration measures the compactness of a protein
structure.

.. math::

   R_\mathrm{gyr}^2 = \frac{1}{M}\sum_{i=1}^{N} m_i(\mathbf{r}_i - \mathbf{R})^2

where :math:`M = \sum_{i=1}^{N} m_i` is the total mass and
:math:`\mathbf{R} = N^{-1}\sum_{i=1}^{N} \mathbf{r}_i` is the center of
mass of the protein consisting of :math:`N` atoms.

The Gromacs tool `g_gyrate`_ can be used to compute it.

.. figure:: /figures/rgyr.svg
   :scale: 80%
   :alt: Timeseries of the radius of gyration.
   
   Timeseries of the radius of gyration computed for the whole
   protein.


.. ::
..   echo Protein | g_gyrate -s ../../MD/md.tpr -f ../../MD/md.xtc -o gyrate.xvg -xvg none

.. ::
..   import matplotlib.pyplot as plt
..   import numpy
..   t,data,x,y,z = numpy.loadtxt("gyrate.xvg", unpack=True)
..   fig = plt.figure(figsize=(5,2.5))
..   ax = fig.add_subplot(111)
..   fig.subplots_adjust(bottom=0.2)
..   ax.set_xlabel("time $t$ (ps)")
..   ax.set_ylabel(r"protein $R_\mathrm{gyr}$ (nm)")
..   ax.fill_between(t,data, color="magenta", linestyle="-", alpha=0.1)
..   ax.plot(t,data, color="magenta", linestyle="-")
..   fig.savefig("rgyr.png", dpi=300)
..   fig.savefig("rgyr.svg")
..   fig.savefig("rgyr.pdf")



Secondary structure
~~~~~~~~~~~~~~~~~~~

.. rubric:: Installation of DSSP

In order to use the Gromacs `do_dssp`_ command you need to install an
additional program, the :program:`dsspcmbi` executable that performs
the DSSP_ algorithm [Kabsch1983]_:

- put the provided :file:`bin/MacOSX/dsspcmbi` Mac OS X executable into your
  :file:`~/opt/bin` directory on your workstation::

     cp bin/MacOSX/dsspcmbi ~/opt/bin

  (If you are using your own Linux machine you can try using the
  :file:`bin/Linux/dsspcmbi` or you will need to download the DSSP_
  source code ("DSSPold") yourself and compile it.)

- set the environment variable :envvar:`DSSP` in your
  :file:`~/opt/bin/GMXRC.bash` Gromacs startup file to tell the
  Gromacs tool :program:`do_dssp` where to find :program:`dsspcmbi`::

     export DSSP=$HOME/opt/bin/dsspcmbi

  (You may also set :envvar:`DSSP` it in your :file:`~/.profile` bash
  startup file.)

You only have to install :program:`dsspcmbi` once.


.. rubric:: :program:`do_dssp` analysis

Install DSSP_ as described above. Look at the options of `do_dssp`_.



References
==========


.. [Kabsch1983] Kabsch W, Sander C. Dictionary of protein secondary
   structure: pattern recognition of hydrogen-bonded and geometrical
   features. *Biopolymers*. 1983 22 2577-2637. doi:
   `10.1002/bip.360221211 <http://dx.doi.org/10.1002/bip.360221211>`_

.. [Willis1975] Willis & Pryor, Thermal vibrations in crystallography,
   Cambridge Univ. Press, 1975

.. [Henzler-Wildman2007] K. A. Henzler-Wildman, V. Thai, M. Lei,
   M. Ott, M. Wolf-Watz, T. Fenn, E. Pozharski, M.  A. Wilson,
   G. A. Petsko, M. Karplus, C. G. Hübner, and D. Kern. Intrinsic
   motions along an enzymatic reaction trajectory. *Nature*,
   450:838–844, Dec 2007. doi: `10.1038/nature06410 <http://dx.doi.org/10.1038/nature06410>`_

.. [Beckstein2009] O. Beckstein, E. J. Denning, J. R. Perilla, and
   T. B. Woolf. Zipping and unzipping of adenylate kinase: Atomistic
   insights into the ensemble of open/closed
   transitions. *J. Mol. Biol.*, 394(1):160–176, 2009. doi:
   `10.1016/j.jmb.2009.09.009 <http://dx.doi.org/10.1016/j.jmb.2009.09.009>`_. 


.. _`AdKTutorial.tar.bz2`:
    http://becksteinlab.physics.asu.edu/pages/courses/2013/SimBioNano/13/AdKTutorial.tar.bz2
.. _4AKE: http://www.rcsb.org/pdb/explore.do?structureId=4ake
.. _pdb2gmx: http://manual.gromacs.org/current/online/pdb2gmx.html
.. _editconf: http://manual.gromacs.org/current/online/editconf.html
.. _genbox: http://manual.gromacs.org/current/online/genbox.html
.. _genion: http://manual.gromacs.org/current/online/genion.html
.. _trjconv: http://manual.gromacs.org/current/online/trjconv.html
.. _trjcat: http://manual.gromacs.org/current/online/trjcat.html
.. _eneconv: http://manual.gromacs.org/current/online/eneconv.html
.. _grompp: http://manual.gromacs.org/current/online/grompp.html
.. _mdrun: http://manual.gromacs.org/current/online/mdrun.html
.. _`mdp options`: http://manual.gromacs.org/current/online/mdp_opt.html
.. _`Run control options in the MDP file`: http://manual.gromacs.org/current/online/mdp_opt.html#run
.. _`make_ndx`: http://manual.gromacs.org/current/online/make_ndx.html
.. _`g_tune_pme`: http://manual.gromacs.org/current/online/g_tune_pme.html
.. _gmxcheck: http://manual.gromacs.org/current/online/gmxcheck.html

.. _Gromacs manual: http://manual.gromacs.org/
.. _Gromacs documentation: http://www.gromacs.org/Documentation
.. _`Gromacs 4.5.6 PDF`: http://www.gromacs.org/@api/deki/files/190/=manual-4.5.6.pdf
.. _manual section: http://www.gromacs.org/Documentation/Manual

.. _`g_rms`: http://manual.gromacs.org/current/online/g_rms.html
.. _`g_rmsf`: http://manual.gromacs.org/current/online/g_rmsf.html
.. _`g_gyrate`: http://manual.gromacs.org/current/online/g_gyrate.html
.. _`g_dist`: http://manual.gromacs.org/current/online/g_dist.html
.. _`g_mindist`: http://manual.gromacs.org/current/online/g_mindist.html
.. _`do_dssp`: http://manual.gromacs.org/current/online/do_dssp.html

.. _DSSP: http://swift.cmbi.ru.nl/gv/dssp/
.. _`ATOM record of a PDB file`: http://www.wwpdb.org/documentation/format33/sect9.html#ATOM


.. rubric:: Footnotes

.. [#crystalwaters] Often you would actually want to retain
   crystallographic water molecules as they might have biological
   relevance. In our example this is likely not the case and by
   removing all of them we simplify the preparation step somewhat. If
   you keep them, :program:`pdb2gmx` in the next step will
   actually create entries in the topology for them.

.. [#topupdate] The automatic modification of the top file by
   :program:`genbox` and :program:`genion` can become a problem if you
   try to run these commands multiple times and you get error messages
   later (typically from :program:`grompp`) that the number of
   molecules in structure file and the topology file do not agree. In
   this case you might have to manually delete or adjust the
   corresponding lines in :file"`system.top` file.

.. [#npme] The :samp:`-npme {NODES}` flag to mdrun_ is a performance
   optimization that only becomes important when running on larger
   numbers of cores (>11). In most cases you do not need to worry
   about it and either set :code:`-npme 0` or simply don't supply the
   option. For larger simulations (e.g. if you are using Gromacs for
   your own projects you will want to optimize this setting with the
   help of the `g_tune_pme`_ utility.)

   For reference, with :code:`-npme 4` on 32 cores on saguaro, the
   performance for the AdK system was 19 ns/d or 1.2 h/ns (about 6
   min for 100 ps).

.. [#observable] "Observable" is used in the widest sense in that we
   know an estimator function of all or a subset of the system's phase
   space coordinates that is averaged to provide a quantity of
   interest. In many cases it requires considerable more work to
   connect such an "observable" to a true experimental observable that
   is measured in an experiment.

.. [#default_ndx_groups] Actually, we don't need to create the index
   group for the |Calpha| atoms ourselves because Gromacs
   automatically creates the group "C-alpha" as one of many default
   groups (other are "Protein", "Protein-H" (only protein heavy
   atoms), "Backbone" (N CA C), "Water", "non-Protein" (i.e. water and
   ions in our case but could also contain other groups such as drug
   molecule or a lipid membrane in more complicated simulations),
   "Water_and_ions". You can see these index groups if you just run
   :program:`make_ndx` on an input structure or if you interactively
   select groups in :program:`trjconv`, :program:`g_rms`, ...

   However, making the "Calpha" group yourself is a good exercise
   because in many cases there are no default index groups for the
   analysis you might want to do.

.. [#scripted_make_ndx] In scripts you can pipe all the interactive
   commands to `make_ndx`_ by using the :code:`printf ... | make_ndx`
   trick::
     
     printf "keep 0\ndel 0\na CA\nname 0 Calpha\nq\n" | make_ndx -f ../../MD/md.tpr -o CA.ndx

   This will accomplish the same thing as the interactive use
   described above.

.. [#ndx_selections] Note that one has to be careful when selecting
   residue ids in :program:`make_ndx`. It is often the case that a PDB
   file does not contain all residues, e.g. residues 1--8 might be
   unresolved in the experiment and thus are missing from the PDB
   file. The file then simply starts with residue number 9. Gromacs,
   however, typically *renumbers residues so that they start at
   1*. Thus, in this hypothetical case, a residue that might be
   referred to in the literature as "residue 100" might actually be
   residue 92 in the simulation (:math:`N^\mathrm{sim}_\mathrm{res} =
   N^\mathrm{PDB}_\mathrm{res} - (\mathrm{min}
   N^\mathrm{PDB}_\mathrm{res} - 1)`). Thus, if you wanted to select
   the |Calpha| atom of residue 100 you would need to select :kbd:`r
   92 & a CA` in :program:`make_ndx`.

.. [#scratch] Scratch directories on saguaro have (nearly) unlimited
   space but are **rigorously purged of all files older than 30
   days**. They are not backed up. You must copy all data off to your
   local work station or loose your data.
